[{"file":"Hello World.md","title":"Hello World","tags":["hello"],"des":"故事从这里开始","date":"2023-6-14","html":"<h1>Hello World</h1>\n<p>如你所见，这是我的第一个博客</p>\n<p>其实这个站点是我个人开发的博客的静态部署生成的，因此以前的博客没有导入</p>\n<p>玩的开心！</p>\n","picture":"","id":0},{"file":"网站介绍.md","title":"网站介绍","tags":["技术","纪录"],"des":"这个网站是怎么来的？","date":"2023-6-14","html":"<h1>这个网站是怎么来的？</h1>\n<h3>回顾</h3>\n<p>到目前为止，这已经是我的第三个博客网站了</p>\n<ul>\n<li>\n<p>第一个博客网站，使用hexo快速搭建，配合一个主题，部署在github上面，从2022年8月使用到2023年1月</p>\n</li>\n<li>\n<p>第二个博客网站，前端使用vue3，js，css开发，后端使用koa mysql开发，前后端都部署在我自己的服务器上，前端使用nginx部署，从2023年1月开始构思到2023年2月初步开发完毕使用到2023年6月</p>\n</li>\n<li>\n<p>第三个博客网站，也就是这个网站，前端使用react18，ts，tailwindcss开发，后端继续使用第二个博客的后端，前端部署在vercel上，现在功能已经基本完善</p>\n</li>\n</ul>\n<h3>理由</h3>\n<ul>\n<li>第一个博客网站，搭建的理由是自己已经到了需要写博客记录技术学习的时候了。当时html css js已经初步掌握，vue3也正在学习，此时我还没有写完整大型项目的能力，因此前端冗杂的知识内容非常需要博客来记录。当时我并没有能力自己独立开发出博客，因而需要选择一款博客框架快速搭建。最终花费了一晚上的时间最终选择了hexo和一款主题（名字忘了）。</li>\n<li>第二个博客网站搭建的理由，我需要先从hexo的优缺点说起。优点很明显，快速，社区生态好。缺点，无后端，所有的博客文件存储在本地，在某些场合下很不方便（当时我windows和linux系统频繁切换使用，博客的记录更新就很麻烦）。而此时，经过了一个学期的学习，vue的学习已经接近尾声，后端koa框架，sql等也有学习基本用法，自己开发博客的想法也就自然而然的诞生了。新的博客有登录功能，能进入后台上传博客，修改主页的各种信息，主页的内容也比较多，还加上了一些自己的独创性想法（比如选中添加批注等）。顺带一提，这个博客现在仍在我的服务器上运行（https://www.coisini.love/）</li>\n<li>第三个博客网站，也是要从第二个博客网站的内容说起。第二个博客网站的内容是非常全面的，甚至连后台也加入了进去。但缺陷也来自于此。由于内容十分冗杂，整个网站非常重，对于访问者的性能也有要求。要命的一点是没有用ts开发，js的动态类型使得整个项目维护起来非常困难。此时我开始回忆起hexo的优势了。另外旧博客的布局样式也有一些问题（尤其是响应式）。正好时间来到了专业实训，对于react 我还没有拿得出手的项目，便开始着手项目的重构与创新。最终花费一周的时间诞生了现在这个网站</li>\n</ul>\n<h3>项目简介</h3>\n<p>这个项目由vite构建，由vercel部署</p>\n<h4>静动态结合</h4>\n<p>项目保留了二代博客前后端交互的基本功能，但同时又增加了类似hexo的静态生成的功能。也就是说，对于使用者来说，无论你有没有后端服务，都可以使用这个项目，只需要修改几个配置项即可</p>\n<h4>高度可配置</h4>\n<p>二代博客的一个特点是冗杂沉重，对于这个问题，我采用了react的组件懒加载<code>lazy</code>方法，基于配置项，组件得以被动态的引入，当配置项的某些选项被关闭时，组件不会被加载，对于性能有一定提升。这也给使用者自定义带来了方便，我在配置项中对于很多静态内容都有配置，修改这些配置（如背景图片等）就可以创造出一些观感不同的体验</p>\n<h3>原理</h3>\n<p>对于前后端交互的模式，原理不需要太多解释，前端发送请求，后端响应，前端生成页面内容</p>\n<p>对于静态生成，我的思路非常简单。首先在项目根目录下有一个<code>staticScript.js</code>的js脚本，它的作用是读取<code>/src/blog</code>文件夹，截取文件结构，将md文件顶部的配置截取出来作为单个博客的信息，主体内容则通过<code>markdown-it</code>库转换为html字符串。将配置信息和html字符串结合起来就是单个博客的所有信息。遍历所有博客，生成一个包含全部博客全部信息的对象数组，转为json，写入到/public/config.json里，之后所有需要连接后端的内容改为对config.json进行fetch请求，再对结果进行截取，返回</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/* eslint-disable no-empty */</span>\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MarkdownIt</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;markdown-it&quot;</span>;\n<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;highlight.js&quot;</span>;\n<span class=\"hljs-keyword\">const</span> md = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MarkdownIt</span>({\n  <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str, lang</span>) {\n    <span class=\"hljs-keyword\">if</span> (lang &amp;&amp; hljs.<span class=\"hljs-title function_\">getLanguage</span>(lang)) {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">return</span> (\n          <span class=\"hljs-string\">&#x27;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&#x27;</span> +\n          hljs.<span class=\"hljs-title function_\">highlight</span>(str, { <span class=\"hljs-attr\">language</span>: lang, <span class=\"hljs-attr\">ignoreIllegals</span>: <span class=\"hljs-literal\">true</span> }).<span class=\"hljs-property\">value</span> +\n          <span class=\"hljs-string\">&quot;&lt;/code&gt;&lt;/pre&gt;&quot;</span>\n        );\n      } <span class=\"hljs-keyword\">catch</span> (__) {}\n    }\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"hljs-string\">&#x27;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&#x27;</span> + md.<span class=\"hljs-property\">utils</span>.escapeHtml(str) + <span class=\"hljs-string\">&quot;&lt;/code&gt;&lt;/pre&gt;&quot;</span>\n    );\n  },\n});\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getBlogsInfo</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> blogFiles = fs.<span class=\"hljs-title function_\">readdirSync</span>(<span class=\"hljs-string\">&quot;./src/blogs/&quot;</span>);\n  blogFiles.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">fileName</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span>(!fileName.<span class=\"hljs-title function_\">endsWith</span>(<span class=\"hljs-string\">&quot;.md&quot;</span>)) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-string\">`./src/blogs/<span class=\"hljs-subst\">${fileName}</span>`</span>;\n    <span class=\"hljs-keyword\">const</span> data = fs.<span class=\"hljs-title function_\">readFileSync</span>(path, <span class=\"hljs-string\">&quot;utf8&quot;</span>);\n    <span class=\"hljs-keyword\">let</span> title = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">const</span> tags = [];\n    <span class=\"hljs-keyword\">let</span> des = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">let</span> date = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">let</span> picture = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&quot;---\\n&quot;</span>)) {\n      <span class=\"hljs-keyword\">const</span> head = data.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;---\\n&quot;</span>)[<span class=\"hljs-number\">1</span>];\n      <span class=\"hljs-keyword\">const</span> content = data.<span class=\"hljs-title function_\">split</span>(head + <span class=\"hljs-string\">&quot;---\\n&quot;</span>)[<span class=\"hljs-number\">1</span>];\n      <span class=\"hljs-keyword\">const</span> html = md.<span class=\"hljs-title function_\">render</span>(content);\n      <span class=\"hljs-keyword\">const</span> headOptions = head.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n      headOptions.<span class=\"hljs-title function_\">pop</span>();\n      headOptions.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">option</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> key = option.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;: &quot;</span>)[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">const</span> value = option.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;: &quot;</span>)[<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-keyword\">if</span>(!(value&amp;&amp;key)) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(key, value);\n          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`Invalid delimiter in <span class=\"hljs-subst\">${fileName}</span>`</span>)\n        }\n        <span class=\"hljs-keyword\">switch</span> (key) {\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;title&quot;</span>:\n            title = value;\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;tags&quot;</span>:\n            tags.<span class=\"hljs-title function_\">push</span>(...value.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot; &quot;</span>));\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;des&quot;</span>:\n            des = value;\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;date&quot;</span>:\n            date = value;\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;picture&quot;</span>: \n            picture = value;\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-attr\">default</span>: \n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`invalid option in <span class=\"hljs-subst\">${fileName}</span>, naming <span class=\"hljs-subst\">${key.toString()}</span>`</span>);\n        }\n      });\n      <span class=\"hljs-keyword\">if</span>(!(title&amp;&amp;des&amp;&amp;date&amp;&amp;tags)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`blog <span class=\"hljs-subst\">${fileName}</span> lose info`</span>)\n      blogContent.<span class=\"hljs-title function_\">push</span>({\n        <span class=\"hljs-attr\">file</span>: fileName,\n        title,\n        tags,\n        des,\n        date,\n        html,\n        picture\n      });\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${fileName}</span> Invalid blog file`</span>);\n    }\n  });\n}\n\n<span class=\"hljs-keyword\">const</span> blogContent = [];\n<span class=\"hljs-title function_\">getBlogsInfo</span>();\nblogContent.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> {\n  item.<span class=\"hljs-property\">id</span> = index\n}); \nfs.<span class=\"hljs-title function_\">writeFileSync</span>(\n  <span class=\"hljs-string\">&quot;./public/config.json&quot;</span>,\n  <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(blogContent),\n  <span class=\"hljs-string\">&quot;utf-8&quot;</span>\n);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;success! Congratulations!&quot;</span>)\n</code></pre>\n<h3>可配置项</h3>\n<p>下面列出了所有可配置项的内容（可能会更新）</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">blogConfig</span>: config = {\n  <span class=\"hljs-attr\">static</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//是否开启静态模式（此时为开启）</span>\n  <span class=\"hljs-attr\">requests</span>: {<span class=\"hljs-comment\">//非静态模式下的路由定义</span>\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;https://www.coisini.love/api/&quot;</span>,<span class=\"hljs-comment\">//后端url</span>\n    <span class=\"hljs-attr\">router</span>: {<span class=\"hljs-comment\">//这里归纳了所有需要配置的后端路由，path和method分别为路由路径和请求方法</span>\n      <span class=\"hljs-attr\">getBlogList</span>: {<span class=\"hljs-comment\">//获取博客列表（默认排序）</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/get/blog&quot;</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n      <span class=\"hljs-attr\">getBlogByTitle</span>: {<span class=\"hljs-comment\">//根据名称搜索博客列表</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/get/blogByTitle&quot;</span>,\n\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n      <span class=\"hljs-attr\">getBlogDetail</span>: {<span class=\"hljs-comment\">//博客详情（包含html内容）</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/get/blogById&quot;</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n      <span class=\"hljs-attr\">getBlogTags</span>: {<span class=\"hljs-comment\">//获取某个博客的tags</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/get/blogTag&quot;</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n      <span class=\"hljs-attr\">getTags</span>: {<span class=\"hljs-comment\">//获取常用tags</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/get/tag&quot;</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n      <span class=\"hljs-attr\">getBlogByTags</span>: {<span class=\"hljs-comment\">//根据tags搜索博客</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/get/blogByTag&quot;</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n      <span class=\"hljs-attr\">getLinks</span>: {<span class=\"hljs-comment\">//获取常用链接</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/get/link&quot;</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n      <span class=\"hljs-attr\">getBlogComments</span>: {<span class=\"hljs-comment\">//获取博客评论（无法在静态模式中使用）</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/get/comment&quot;</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n      <span class=\"hljs-attr\">addComment</span>: {<span class=\"hljs-comment\">//添加评论（无法在静态模式下使用）</span>\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/comment/add&quot;</span>,\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;post&quot;</span>,\n      },\n    },\n  },\n  <span class=\"hljs-attr\">homeBackground</span>: <span class=\"hljs-literal\">false</span>,<span class=\"hljs-comment\">//首屏背景图 false｜string</span>\n  <span class=\"hljs-attr\">mainBackground</span>: <span class=\"hljs-string\">&quot;mainBackground.jpg&quot;</span>,<span class=\"hljs-comment\">//主背景图（博客列表页面展示，若无首屏背景，也会在首屏展示）</span>\n  <span class=\"hljs-attr\">staticBlogBackground</span>: [<span class=\"hljs-string\">&quot;blogBackground1.jpeg&quot;</span>,<span class=\"hljs-string\">&quot;blogBackground2.jpeg&quot;</span>,<span class=\"hljs-string\">&quot;blogBackground3.jpeg&quot;</span>],<span class=\"hljs-comment\">//静态博客随机背景图，当静态博客的背景图未配置时，会随机采用上方的背景图，背景图要存放在/public里</span>\n  <span class=\"hljs-attr\">chatBox</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//是否开启AI聊天框</span>\n  <span class=\"hljs-attr\">chatAvatar</span>: <span class=\"hljs-string\">&quot;cyberCheems.jpg&quot;</span>,<span class=\"hljs-comment\">//AI机器人头像</span>\n  <span class=\"hljs-attr\">homeVideo</span>: <span class=\"hljs-string\">&quot;background.mp4&quot;</span>,<span class=\"hljs-comment\">//首屏背景mp4，由于手机浏览器性能原因，小屏幕下不会被展示</span>\n  <span class=\"hljs-attr\">blogBackground</span>: <span class=\"hljs-string\">&quot;/blogBackground.jpeg&quot;</span>,<span class=\"hljs-comment\">//博客详情页背景图</span>\n  <span class=\"hljs-attr\">blogComment</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//是否开启博客评论区</span>\n  <span class=\"hljs-attr\">blogContent</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//是否开启博客目录</span>\n  <span class=\"hljs-attr\">commonTags</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//是否开启常用tag</span>\n  <span class=\"hljs-attr\">staticCommonTags</span>: [<span class=\"hljs-string\">&quot;vue&quot;</span>, <span class=\"hljs-string\">&quot;react&quot;</span>,<span class=\"hljs-string\">&quot;hello&quot;</span>],<span class=\"hljs-comment\">//静态模式下的常用tag栏</span>\n  <span class=\"hljs-attr\">search</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//是否开启根据标题搜索博客</span>\n  <span class=\"hljs-attr\">commonSites</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//是否开启常用网站</span>\n  <span class=\"hljs-attr\">staticCommonSites</span>: [<span class=\"hljs-comment\">//静态模式下的常用网站列表</span>\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;bilibili&quot;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;https://www.bilibili.com/&quot;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;google&quot;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;https://www.google.com/&quot;</span>\n    }\n  ],\n  <span class=\"hljs-attr\">music</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-comment\">//是否开启音乐播放器</span>\n  <span class=\"hljs-attr\">neteasePlayListId</span>: <span class=\"hljs-string\">&quot;2517473337&quot;</span>,<span class=\"hljs-comment\">//音乐播放器链接到的网易云音乐歌单id</span>\n  <span class=\"hljs-attr\">staticMusicList</span>: [<span class=\"hljs-string\">&quot;bgm.m4a&quot;</span>],<span class=\"hljs-comment\">//静态模式下的背景音乐（由于有音乐播放器，该功能弃用）</span>\n  <span class=\"hljs-attr\">layout</span>: <span class=\"hljs-string\">&quot;two cols&quot;</span>,<span class=\"hljs-comment\">//博客列表布局，one col｜two cols</span>\n  <span class=\"hljs-attr\">avatar</span>: <span class=\"hljs-string\">&quot;avatar.jpg&quot;</span>,<span class=\"hljs-comment\">//主页头像</span>\n  <span class=\"hljs-attr\">avatarTags</span>: [<span class=\"hljs-string\">&quot;前端&quot;</span>, <span class=\"hljs-string\">&quot;想吃薯条&quot;</span>, <span class=\"hljs-string\">&quot;infp&quot;</span>, <span class=\"hljs-string\">&quot;enfp&quot;</span>, <span class=\"hljs-string\">&quot;睡眠好差&quot;</span>],<span class=\"hljs-comment\">//鼠标悬浮头像会出现的tag</span>\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;柴犬的小窝&quot;</span>,<span class=\"hljs-comment\">//首页标题</span>\n  <span class=\"hljs-attr\">introduction</span>: <span class=\"hljs-string\">&quot;她做着琉璃般的梦...当星河坠入深海之时...&quot;</span>,<span class=\"hljs-comment\">//首页简要介绍</span>\n  <span class=\"hljs-attr\">chatWelcomeWord</span>:<span class=\"hljs-comment\">//AI聊天的欢迎语句</span>\n    <span class=\"hljs-string\">&quot;你好，我是柴犬的朋友赛博柴犬，你可以在下面的输入框里添加openAI的apiKey来与我对话，我不会收集任何apiKey&quot;</span>,\n  <span class=\"hljs-attr\">systemPrompt</span>: <span class=\"hljs-string\">&quot;现在假设你是一个赛博朋克柴犬，能回答我提出的问题，你的回答方式要像赛博朋克柴犬说话的样子。我的问题是：&quot;</span><span class=\"hljs-comment\">//针对AI机器人的propmpt</span>\n};\n</code></pre>\n<h3>博客配置项</h3>\n<p>只能在静态模式下使用</p>\n<p>这些配置项是必要而且不能有格式错误的，否则<code>staticScript</code>将无法正常工作</p>\n<pre class=\"hljs\"><code>---\ntitle: 标题，注意与:之间要留有空格\ndes: 简介（副标题）\ndate: 2023-6-14（时间）\ntags: tag1 tag2 ...（空格隔开）\n---\n</code></pre>\n<p>需要包裹在两个<code>---</code>之内</p>\n<h3>如何使用</h3>\n<p>你需要配置nodejs，yarn</p>\n<p>你的博客文件需要放置在/src/blogs下</p>\n<p>配置文件在/src/blogConfig.ts中</p>\n<p>每次更新完博客，在根目录下运行<code>node staticScript.js</code></p>\n<p>使用vercel等静态部署平台部署即可</p>\n<h3>后续规划</h3>\n<h4>后台开发</h4>\n<p>开发后台项目用来上传，管理博客（近期内完成）</p>\n<h4>纯静态</h4>\n<p>现在动静态结合的方式使得代码量很大，未来会将静态内容抽离出来，并增加更多的可配置css来作为一个博客框架</p>\n","picture":"","id":1}]